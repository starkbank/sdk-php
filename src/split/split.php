<?php

namespace StarkBank;
use StarkCore\Utils\Checks;
use StarkCore\Utils\Resource;
use StarkCore\Utils\StarkDate;
use StarkBank\Utils\Rest;

class Split extends Resource
{

    public $amount;
    public $receiverId;
    public $source;
    public $externalId;
    public $tags;
    public $scheduled;
    public $status;
    public $created;
    public $updated;

    /**
    # Split object

    When you initialize a Split, the entity will not be automatically
    created in the Stark Bank API.

    ## Parameters (required):
        - amount [int]: value to send to receivers. ex: 1000 (= R$ 10.00)
        - receiverId [string]: split receiver unique id. ex: "5656565656565656"

    ## Attributes (return-only):
        - id [string]: unique id returned when split is created. ex: "5656565656565656"
        - source [string]: source receivable which generated this split object. ex: "invoice/5656565656565656"
        - externalId [string]: unique id, generated by the system, to avoid duplicated splits. ex: "split/1234/receiver/5678"
        - tags [list of strings, default None]: list of strings for tagging
        - scheduled [datetime.date, datetime.datetime or string, default now]: payment scheduled date or datetime. ex: datetime.datetime(2020, 3, 10, 15, 17, 3)
        - status [string]: current payment status. ex: "success" or "failed"
        - created [datetime.datetime]: creation datetime for the payment. ex: datetime.datetime(2020, 3, 10, 10, 30, 0, 0)
        - updated [datetime.datetime]: update datetime for the payment. ex: datetime.datetime(2020, 3, 10, 10, 30, 0, 0)
     */
    function __construct(array $params)
    {
        parent::__construct($params);

        $this->amount = Checks::checkParam($params,"amount");
        $this->receiverId = Checks::checkParam($params,"receiverId");
        $this->source = Checks::checkParam($params,"source");
        $this->externalId = Checks::checkParam($params,"externalId");
        $this->tags = Checks::checkParam($params,"tags");
        $this->scheduled = Checks::checkDateTimeOrDate(Checks::checkParams($params,"scheduled"));
        $this->status = Checks::checkParam($params,"status");
        $this->created = Checks::checkDateTimeOrDate(Checks::checkParams($params,"created"));
        $this->updated = Checks::checkDateTimeOrDate(Checks::checkParams($params,"updated"));

        Checks::checkParams($params);
    }

    /**
    # Retrieve a specific Split

    Receive a single Split object previously created by the Stark Bank API by its id
    
    ## Parameters (required):
        - id [string]: object unique id. ex: "5656565656565656"
    
    ## Parameters (optional):
        - user [Organization/Project object, default None]: Organization or Project object. Not necessary if starkbank.user was set before function call
    
    ## Return:
        - Split object with updated attributes
     */
    public static function get($id, $user = null)
    {
        return Rest::getId($user, Split::resource(), $id);
    }

    /**
    # Retrieve Splits

    Receive a enumerator of Split objects previously created in the Stark Bank API
    
    ## Parameters (optional):
        - limit [integer, default None]: maximum number of objects to be retrieved. Unlimited if None. ex: 35
        - after [datetime.date or string, default None] date filter for objects created only after specified date. ex: datetime.date(2020, 3, 10)
        - before [datetime.date or string, default None] date filter for objects created only before specified date. ex: datetime.date(2020, 3, 10)
        - tags [list of strings, default None]: tags to filter retrieved objects. ex: ["tony", "stark"]
        - ids [list of strings, default None]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        - receiverIds [list of strings, default None]: list of receiver ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        - status [string, default None]: filter for status of retrieved objects. ex: "success"
        - user [Organization/Project object, default None]: Organization or Project object. Not necessary if starkbank.user was set before function call
    
    ## Return:
        - enumerator of Split objects with updated attributes
     */
    public static function query($options = [], $user = null)
    {
        $options["after"] = new StarkDate(Checks::checkParam($options, "after"));
        $options["before"] = new StarkDate(Checks::checkParam($options, "before"));
        return Rest::getList($user, Split::resource(), $options);
    }

    /**
    # Retrieve paged Splits

    Receive a list of up to 100 Split objects previously created in the Stark Bank API and the cursor to the next page.
    Use this function instead of query if you want to manually page your requests.
    
    ## Parameters (optional):
        - cursor [string, default None]: cursor returned on the previous page function call
        - limit [integer, default 100]: maximum number of objects to be retrieved. It must be an integer between 1 and 100. ex: 50
        - after [datetime.date or string, default None] date filter for objects created only after specified date. ex: datetime.date(2020, 3, 10)
        - before [datetime.date or string, default None] date filter for objects created only before specified date. ex: datetime.date(2020, 3, 10)
        - tags [list of strings, default None]: tags to filter retrieved objects. ex: ["tony", "stark"]
        - ids [list of strings, default None]: list of ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        - receiverIds [list of strings, default None]: list of receiver ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        - status [string, default None]: filter for status of retrieved objects. ex: "success"
        - user [Organization/Project object, default None]: Organization or Project object. Not necessary if starkbank.user was set before function call
    
    ## Return:
        - list of Split objects with updated attributes
        - cursor to retrieve the next page of Split objects
     */
    public static function page($options = [], $user = null)
    {
        return Rest::getPage($user, Split::resource(), $options);
    }

    private static function resource()
    {
        $split = function ($array) {
            return new Split($array);
        };
        return [
            "name" => "Split",
            "maker" => $split,
        ];
    }
}
