<?php

namespace StarkBank;

use StarkBank\Utils\Resource;
use StarkBank\Utils\Checks;
use StarkBank\Utils\Rest;


class Transaction extends Resource
{
    /**
    Transaction object

    A Transaction is a transfer of funds between workspaces inside Stark Bank.
    Transactions created by the user are only for internal transactions.
    Other operations (such as transfer or charge-payment) will automatically
    create a transaction for the user which can be retrieved for the statement.
    When you initialize a Transaction, the entity will not be automatically
    created in the Stark Bank API. The 'create' function sends the objects
    to the Stark Bank API and returns the list of created objects.

    Parameters (required):
        amount [integer]: amount in cents to be transferred. ex: 1234 (= R$ 12.34)
        description [string]: text to be displayed in the receiver and the sender statements (Min. 10 characters). ex: "funds redistribution"
        external_id [string]: unique id, generated by user, to avoid duplicated transactions. ex: "transaction ABC 2020-03-30"
        received_id [string]: unique id of the receiving workspace. ex: "5656565656565656"
    Parameters (optional):
        tags [list of strings]: list of strings for reference when searching transactions (may be empty). ex: ["abc", "test"]
    Attributes (return-only):
        source [string, default None]: locator of the entity that generated the transaction. ex: "charge/1827351876292", "transfer/92873912873/chargeback"
        id [string, default None]: unique id returned when Transaction is created. ex: "7656565656565656"
        fee [integer, default None]: fee charged when transfer is created. ex: 200 (= R$ 2.00)
        created [datetime.datetime, default None]: creation datetime for the boleto. ex: datetime.datetime(2020, 3, 10, 10, 30, 0, 0)
     */
    function __construct($amount, $description, $externalId, $receiverId, $tags = null, $id = null, $fee = null, $created = null, $source = null)
    {
        parent::__construct($id);
        $this->amount = $amount;
        $this->description = $description;
        $this->externalId = $externalId;
        $this->receiverId = $receiverId;
        $this->tags = $tags;
        $this->id = $id;
        $this->fee = $fee;
        $this->created = Checks::checkDateTime($created);
        $this->source = $source;
    }

    /**
    Create Transactions

    Send a list of Transaction objects for creation in the Stark Bank API

    Parameters (required):
        transactions [list of Transaction objects]: list of Transaction objects to be created in the API
    Parameters (optional):
        user [Project object]: Project object. Not necessary if starkbank.user was set before function call
    Return:
        list of Transaction objects with updated attributes
     */
    public function create($user, $transactions)
    {
        return Rest::post($user, Transaction::resource(), $transactions);
    }

    /**
    Retrieve a specific Transaction

    Receive a single Transaction object previously created in the Stark Bank API by passing its id

    Parameters (required):
        id [string]: object unique id. ex: "5656565656565656"
    Parameters (optional):
        user [Project object]: Project object. Not necessary if starkbank.user was set before function call
    Return:
        Transaction object with updated attributes
     */
    public function get($user, $id)
    {
        return Rest::getId($user, Transaction::resource(), $id);
    }

    /**
    Retrieve Transactions

    Receive a generator of Transaction objects previously created in the Stark Bank API

    Parameters (optional):
        limit [integer, default None]: maximum number of objects to be retrieved. Unlimited if None. ex: 35
        external_ids [list of strings, default None]: list of external ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        after [datetime.date, default None] date filter for objects created only after specified date. ex: datetime.date(2020, 3, 10)
        before [datetime.date, default None] date filter for objects created only before specified date. ex: datetime.date(2020, 3, 10)
        user [Project object, default None]: Project object. Not necessary if starkbank.user was set before function call
    Return:
        generator of Transaction objects with updated attributes
     */
    public function query($user, $limit = null, $options = [])
    {
        $options["after"] = Checks::checkDateTime($options["after"]);
        $options["before"] = Checks::checkDateTime($options["before"]);
        return Rest::getList($user, Transaction::resource(), $limit, $options);
    }

    private function resource()
    {
        $transaction = function ($json) {
            return new Transaction($json["amount"], $json["description"], $json["externalId"], $json["receiverId"], $json["tags"], $json["id"], $json["fee"], $json["created"], $json["source"]);
        };
        return [
            "name" => "Transaction",
            "maker" => $transaction,
        ];
    }
}
